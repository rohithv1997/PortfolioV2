@using System.Text.Json
@typeparam T
@inject IHostEnvironment Environment

@if (_data == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    @ChildContent.Invoke(_data)
}

@code
{
    private T? _data;
    [Parameter] [EditorRequired] public required string FilePath { get; set; }
    [Parameter] [EditorRequired] public required RenderFragment<T> ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var path = Path.Combine(Environment.ContentRootPath, FilePath);
        if (File.Exists(path))
        {
            var json = await File.ReadAllTextAsync(path);
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            _data = JsonSerializer.Deserialize<T>(json, options);
        }
    }
}
